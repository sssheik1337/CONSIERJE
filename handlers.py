from __future__ import annotations

from datetime import datetime, timedelta

import aiosqlite
from aiogram import Bot, F, Router
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import config
from db import DB
from payments import process_payment

router = Router()

DEFAULT_TRIAL_DAYS = 3
DEFAULT_AUTO_RENEW = True
COUPON_KIND_TRIAL = "trial"

MD_V2_SPECIAL = set("_*[]()~`>#+-=|{}.!\\")

CANCEL_REPLY = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True,
)

START_TEXT = "üéüÔ∏è –î–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.\n\n‚ÑπÔ∏è –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É."


class BindChat(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —á–∞—Ç–∞ –ø–æ username."""

    wait_username = State()


class Admin(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""

    WaitPrices = State()
    WaitTrialDays = State()
    WaitCustomCode = State()


class User(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    WaitPromoCode = State()


def escape_md(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2."""

    return "".join(f"\\{char}" if char in MD_V2_SPECIAL else char for char in text)


def format_expiry(ts: int) -> str:
    """–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–π–º—Å—Ç–∞–º–ø –≤ —Å—Ç—Ä–æ–∫—É UTC."""

    return datetime.utcfromtimestamp(ts).strftime("%d.%m.%Y %H:%M UTC")


def is_super_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º."""

    return user_id in config.SUPER_ADMIN_IDS


def inline_emoji(flag: bool) -> str:
    """–í–µ—Ä–Ω—É—Ç—å —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞."""

    return "‚úÖ" if flag else "‚ùå"


def is_cancel(text: str | None) -> bool:
    """–ü–æ–Ω—è—Ç—å, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥."""

    if text is None:
        return False
    return text.strip().lower() == "–æ—Ç–º–µ–Ω–∞"


async def has_trial_coupon(db: DB, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∏–º–µ–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–±–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥."""

    async with aiosqlite.connect(db.path) as conn:
        cur = await conn.execute(
            "SELECT 1 FROM coupons WHERE kind=? AND used_by=? LIMIT 1",
            (COUPON_KIND_TRIAL, user_id),
        )
        return await cur.fetchone() is not None


def build_user_menu(auto_on: bool, is_admin: bool) -> InlineKeyboardMarkup:
    """–°–æ–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""

    builder = InlineKeyboardBuilder()
    builder.button(text="üí≥ –ö—É–ø–∏—Ç—å 1 –º–µ—Å", callback_data="buy:months:1")
    builder.button(text="üí≥ –ö—É–ø–∏—Ç—å 2 –º–µ—Å", callback_data="buy:months:2")
    builder.button(text="üí≥ –ö—É–ø–∏—Ç—å 3 –º–µ—Å", callback_data="buy:months:3")
    builder.button(
        text=f"üîÅ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {inline_emoji(auto_on)}",
        callback_data="ar:toggle",
    )
    builder.button(text="üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="invite:once")
    builder.button(text="üè∑Ô∏è –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promo:enter")
    if is_admin:
        builder.button(text="üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin:open")
    builder.adjust(2, 2, 2, 1)
    return builder.as_markup()


async def get_user_menu(db: DB, user_id: int) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""

    user = await db.get_user(user_id)
    auto_flag = bool(user and user["auto_renew"])
    return build_user_menu(auto_flag, is_super_admin(user_id))


async def refresh_user_menu(message: Message, db: DB, user_id: int) -> None:
    """–ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ –º–µ–Ω—è—è —Ç–µ–∫—Å—Ç."""

    markup = await get_user_menu(db, user_id)
    try:
        await message.edit_reply_markup(reply_markup=markup)
    except TelegramBadRequest:
        await message.answer(
            escape_md("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ."),
            reply_markup=markup,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )


async def build_admin_panel(db: DB) -> tuple[str, InlineKeyboardMarkup]:
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""

    chat_username = await db.get_target_chat_username()
    chat_id = await db.get_target_chat_id()
    if chat_id is None:
        chat_line = "‚Ä¢ –ß–∞—Ç: –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    else:
        if chat_username:
            chat_line = f"‚Ä¢ –ß–∞—Ç: {chat_username} (id {chat_id})"
        else:
            chat_line = f"‚Ä¢ –ß–∞—Ç: id {chat_id}"
    trial_days = await db.get_trial_days_global(DEFAULT_TRIAL_DAYS)
    auto_default = await db.get_auto_renew_default(DEFAULT_AUTO_RENEW)
    prices = await db.get_prices({})
    if prices:
        parts = [f"{months} –º–µ—Å ‚Äî {price}‚ÇΩ" for months, price in sorted(prices.items())]
        price_text = ", ".join(parts)
    else:
        price_text = "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    lines = [
        "üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        chat_line,
        f"‚Ä¢ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {trial_days} –¥–Ω.",
        f"‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {inline_emoji(auto_default)}",
        f"‚Ä¢ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç: {price_text}",
    ]
    text = "\n".join(escape_md(line) for line in lines)

    builder = InlineKeyboardBuilder()
    builder.button(text="üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç", callback_data="admin:bind_chat")
    builder.button(text="üí∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã", callback_data="admin:prices")
    builder.button(text="üóìÔ∏è –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="admin:trial_days")
    builder.button(
        text=f"üîÅ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {inline_emoji(auto_default)}",
        callback_data="admin:auto_default",
    )
    builder.button(text="üè∑Ô∏è –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin:create_coupon")
    builder.adjust(2, 2, 1)

    return text, builder.as_markup()


async def render_admin_panel(message: Message, db: DB) -> None:
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."""

    text, markup = await build_admin_panel(db)
    try:
        await message.edit_text(
            text,
            reply_markup=markup,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
    except TelegramBadRequest:
        await message.answer(
            text,
            reply_markup=markup,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )


async def refresh_admin_panel_by_state(bot: Bot, state: FSMContext, db: DB) -> None:
    """–ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º."""

    data = await state.get_data()
    chat_id = data.get("panel_chat_id")
    message_id = data.get("panel_message_id")
    if not chat_id or not message_id:
        return
    text, markup = await build_admin_panel(db)
    try:
        await bot.edit_message_text(
            text,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=markup,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
    except TelegramBadRequest:
        await bot.send_message(
            chat_id,
            text,
            reply_markup=markup,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )


async def apply_trial_coupon(db: DB, user_id: int) -> tuple[bool, str]:
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""

    trial_days = await db.get_trial_days_global(DEFAULT_TRIAL_DAYS)
    if trial_days <= 0:
        return False, "‚ùå –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    trial_seconds = int(timedelta(days=trial_days).total_seconds())
    now_ts = int(datetime.utcnow().timestamp())
    user = await db.get_user(user_id)
    if user is None:
        auto_default = await db.get_auto_renew_default(DEFAULT_AUTO_RENEW)
        await db.upsert_user(user_id, now_ts, trial_days, auto_default, False)
        await db.set_paid_only(user_id, False)
        expires_at = now_ts + trial_seconds
        return True, f"‚úÖ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ {format_expiry(expires_at)}."
    expires_at = user["expires_at"] or 0
    if expires_at <= now_ts:
        new_exp = now_ts + trial_seconds
        async with aiosqlite.connect(db.path) as conn:
            await conn.execute(
                "UPDATE users SET expires_at=?, paid_only=0 WHERE user_id=?",
                (new_exp, user_id),
            )
            await conn.commit()
        return True, f"‚úÖ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ {format_expiry(new_exp)}."
    await db.set_paid_only(user_id, False)
    return True, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {format_expiry(expires_at)}."


async def redeem_promo_code(
    message: Message,
    db: DB,
    code: str,
    *,
    remove_keyboard: bool,
) -> None:
    """–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∏ —Å–æ–æ–±—â–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""

    normalized = (code or "").strip()
    if not normalized:
        text = escape_md("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        reply_markup = ReplyKeyboardRemove() if remove_keyboard else None
        await message.answer(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
        return
    ok, info, kind = await db.use_coupon(normalized, message.from_user.id)
    if not ok:
        reply_markup = ReplyKeyboardRemove() if remove_keyboard else None
        await message.answer(
            escape_md(f"‚ùå {info}"),
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
        return
    if kind != COUPON_KIND_TRIAL:
        reply_markup = ReplyKeyboardRemove() if remove_keyboard else None
        await message.answer(
            escape_md("‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."),
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
        return
    success, result_text = await apply_trial_coupon(db, message.from_user.id)
    reply_markup = ReplyKeyboardRemove() if remove_keyboard else None
    await message.answer(
        escape_md(result_text),
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN_V2,
        disable_web_page_preview=True,
    )
    if not success:
        return
    menu = await get_user_menu(db, message.from_user.id)
    await message.answer(
        escape_md("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ."),
        reply_markup=menu,
        parse_mode=ParseMode.MARKDOWN_V2,
        disable_web_page_preview=True,
    )


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, db: DB) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    await state.clear()
    user_id = message.from_user.id
    now_ts = int(datetime.utcnow().timestamp())
    auto_default = await db.get_auto_renew_default(DEFAULT_AUTO_RENEW)
    trial_days = await db.get_trial_days_global(DEFAULT_TRIAL_DAYS)
    paid_only = True
    if await has_trial_coupon(db, user_id):
        paid_only = False
    await db.upsert_user(user_id, now_ts, trial_days, auto_default, paid_only)
    if not paid_only:
        await db.set_paid_only(user_id, False)
    menu = await get_user_menu(db, user_id)
    await message.answer(
        escape_md(START_TEXT),
        reply_markup=menu,
        parse_mode=ParseMode.MARKDOWN_V2,
        disable_web_page_preview=True,
    )


@router.callback_query(F.data.startswith("buy:months:"))
async def handle_buy(callback: CallbackQuery, db: DB) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""

    user_id = callback.from_user.id
    parts = (callback.data or "").split(":")
    try:
        months = int(parts[2])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)
        return
    prices = await db.get_prices({})
    price = prices.get(months)
    if price is None:
        await callback.answer("–¶–µ–Ω–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
        return
    success, payment_text = await process_payment(user_id, months, prices)
    if not success:
        await callback.answer(payment_text, show_alert=True)
        return
    await db.extend_subscription(user_id, months)
    await db.set_paid_only(user_id, False)
    if callback.message:
        await callback.message.answer(
            escape_md(payment_text),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
        await refresh_user_menu(callback.message, db, user_id)
    await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞.")


@router.callback_query(F.data == "ar:toggle")
async def handle_toggle_autorenew(callback: CallbackQuery, db: DB) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    if user is None:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start.", show_alert=True)
        return
    current = bool(user["auto_renew"])
    new_flag = not current
    await db.set_auto_renew(user_id, new_flag)
    if callback.message:
        await refresh_user_menu(callback.message, db, user_id)
    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")


@router.callback_query(F.data == "invite:once")
async def handle_invite(callback: CallbackQuery, bot: Bot, db: DB) -> None:
    """–í—ã–¥–∞—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç."""

    target_chat_id = await db.get_target_chat_id()
    if target_chat_id is None:
        await callback.answer("–ß–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.", show_alert=True)
        return
    expire_ts = int((datetime.utcnow() + timedelta(days=1)).timestamp())
    try:
        link = await bot.create_chat_invite_link(
            target_chat_id,
            member_limit=1,
            expire_date=expire_ts,
        )
    except Exception:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
        return
    if callback.message:
        text = "\n".join(
            [
                escape_md("–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ (–¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞):"),
                escape_md(link.invite_link),
            ]
        )
        await callback.message.answer(
            text,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
    await callback.answer()


@router.callback_query(F.data == "promo:enter")
async def handle_promo_enter(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""

    await state.set_state(User.WaitPromoCode)
    if callback.message:
        await callback.message.answer(
            escape_md("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:"),
            reply_markup=CANCEL_REPLY,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
    await callback.answer()


@router.message(User.WaitPromoCode)
async def handle_promo_input(message: Message, state: FSMContext, db: DB) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""

    text = message.text or ""
    if is_cancel(text):
        await state.clear()
        await message.answer(
            escape_md("–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω—ë–Ω."),
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
        await message.answer(
            escape_md("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ."),
            reply_markup=await get_user_menu(db, message.from_user.id),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
        return
    await redeem_promo_code(message, db, text, remove_keyboard=True)
    await state.clear()


@router.message(Command("use"))
async def cmd_use(message: Message, state: FSMContext, db: DB) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /use –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞."""

    await state.clear()
    parts = (message.text or "").split(maxsplit=1)
    if len(parts) < 2:
        await message.answer(
            escape_md("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /use CODE."),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
        return
    await redeem_promo_code(message, db, parts[1], remove_keyboard=False)


@router.callback_query(F.data == "admin:open")
async def open_admin_panel(callback: CallbackQuery, db: DB) -> None:
    """–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""

    if not is_super_admin(callback.from_user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    if callback.message:
        await render_admin_panel(callback.message, db)
    await callback.answer()


@router.callback_query(F.data == "admin:bind_chat")
async def admin_bind_chat(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ username —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞."""

    if not is_super_admin(callback.from_user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.set_state(BindChat.wait_username)
    if callback.message:
        await state.update_data(
            panel_chat_id=callback.message.chat.id,
            panel_message_id=callback.message.message_id,
        )
        await callback.message.answer(
            escape_md("–ü—Ä–∏—à–ª–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã."),
            reply_markup=CANCEL_REPLY,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
    await callback.answer()


@router.message(BindChat.wait_username)
async def process_bind_username(
    message: Message,
    bot: Bot,
    db: DB,
    state: FSMContext,
) -> None:
    """–ü—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç –ø–æ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–º—É username."""

    if not is_super_admin(message.from_user.id):
        await state.clear()
        return
    text = (message.text or "").strip()
    if is_cancel(text):
        await message.answer(
            escape_md("–ü—Ä–∏–≤—è–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."),
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
        await state.clear()
        return
    if not text.startswith("@") or len(text) < 2:
        await message.answer(
            escape_md("–ù—É–∂–µ–Ω username –≤ —Ñ–æ—Ä–º–∞—Ç–µ @example."),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
        return
    try:
        chat = await bot.get_chat(text)
    except TelegramBadRequest:
        await message.answer(
            escape_md("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞."),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
        return
    except Exception:
        await message.answer(
            escape_md("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
        return
    stored_username = getattr(chat, "username", None)
    if stored_username:
        stored_value = f"@{stored_username}"
    else:
        stored_value = text
    await db.set_target_chat_username(stored_value)
    await db.set_target_chat_id(chat.id)
    await message.answer(
        escape_md(f"‚úÖ –ß–∞—Ç {stored_value} (id {chat.id}) –ø—Ä–∏–≤—è–∑–∞–Ω."),
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN_V2,
        disable_web_page_preview=True,
    )
    await refresh_admin_panel_by_state(bot, state, db)
    await state.clear()


@router.callback_query(F.data == "admin:prices")
async def admin_prices(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ü–µ–Ω."""

    if not is_super_admin(callback.from_user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.set_state(Admin.WaitPrices)
    if callback.message:
        await state.update_data(
            panel_chat_id=callback.message.chat.id,
            panel_message_id=callback.message.message_id,
        )
        await callback.message.answer(
            escape_md("–ü—Ä–∏—à–ª–∏—Ç–µ —Ü–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1:399,2:699."),
            reply_markup=CANCEL_REPLY,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
    await callback.answer()


@router.message(Admin.WaitPrices)
async def admin_set_prices(message: Message, state: FSMContext, db: DB, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Ü–µ–Ω."""

    if not is_super_admin(message.from_user.id):
        await state.clear()
        return
    text = (message.text or "").strip()
    if is_cancel(text):
        await message.answer(
            escape_md("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."),
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
        await state.clear()
        return
    cleaned = text.replace(" ", "")
    entries = [item for item in cleaned.split(",") if item]
    prices: dict[int, int] = {}
    for entry in entries:
        if ":" not in entry:
            await message.answer(
                escape_md("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü—ã:—Ü–µ–Ω–∞."),
                parse_mode=ParseMode.MARKDOWN_V2,
                disable_web_page_preview=True,
            )
            return
        left, right = entry.split(":", 1)
        try:
            months = int(left)
            price = int(right)
        except ValueError:
            await message.answer(
                escape_md("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞."),
                parse_mode=ParseMode.MARKDOWN_V2,
                disable_web_page_preview=True,
            )
            return
        if months <= 0 or price <= 0:
            await message.answer(
                escape_md("–ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏."),
                parse_mode=ParseMode.MARKDOWN_V2,
                disable_web_page_preview=True,
            )
            return
        prices[months] = price
    if not prices:
        await message.answer(
            escape_md("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏."),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
        return
    await db.set_prices(prices)
    await message.answer(
        escape_md("‚úÖ –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã."),
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN_V2,
        disable_web_page_preview=True,
    )
    await refresh_admin_panel_by_state(bot, state, db)
    await state.clear()


@router.callback_query(F.data == "admin:trial_days")
async def admin_trial_days(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–Ω—ã—Ö –¥–Ω–µ–π."""

    if not is_super_admin(callback.from_user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.set_state(Admin.WaitTrialDays)
    if callback.message:
        await state.update_data(
            panel_chat_id=callback.message.chat.id,
            panel_message_id=callback.message.message_id,
        )
        await callback.message.answer(
            escape_md("–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."),
            reply_markup=CANCEL_REPLY,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
    await callback.answer()


@router.message(Admin.WaitTrialDays)
async def admin_set_trial_days(message: Message, state: FSMContext, db: DB, bot: Bot) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""

    if not is_super_admin(message.from_user.id):
        await state.clear()
        return
    text = (message.text or "").strip()
    if is_cancel(text):
        await message.answer(
            escape_md("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."),
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
        await state.clear()
        return
    if not text.isdigit():
        await message.answer(
            escape_md("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
        return
    days = int(text)
    if days <= 0:
        await message.answer(
            escape_md("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è."),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
        return
    await db.set_trial_days_global(days)
    await message.answer(
        escape_md(f"‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {days} –¥–Ω."),
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN_V2,
        disable_web_page_preview=True,
    )
    await refresh_admin_panel_by_state(bot, state, db)
    await state.clear()


@router.callback_query(F.data == "admin:auto_default")
async def admin_toggle_auto_default(callback: CallbackQuery, db: DB) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""

    if not is_super_admin(callback.from_user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    current = await db.get_auto_renew_default(DEFAULT_AUTO_RENEW)
    await db.set_auto_renew_default(not current)
    if callback.message:
        await render_admin_panel(callback.message, db)
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")


@router.callback_query(F.data == "admin:create_coupon")
async def admin_create_coupon(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""

    if not is_super_admin(callback.from_user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.set_state(Admin.WaitCustomCode)
    if callback.message:
        await state.update_data(
            panel_chat_id=callback.message.chat.id,
            panel_message_id=callback.message.message_id,
        )
        await callback.message.answer(
            escape_md("–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (–ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã/–¥–µ—Ñ–∏—Å, 4‚Äì32 —Å–∏–º–≤–æ–ª–∞)."),
            reply_markup=CANCEL_REPLY,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
    await callback.answer()


@router.message(Admin.WaitCustomCode)
async def admin_save_custom_code(message: Message, state: FSMContext, db: DB, bot: Bot) -> None:
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""

    if not is_super_admin(message.from_user.id):
        await state.clear()
        return
    text = (message.text or "").strip()
    if is_cancel(text):
        await message.answer(
            escape_md("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."),
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
        await state.clear()
        return
    ok, info = await db.create_coupon(text, COUPON_KIND_TRIAL)
    if not ok:
        await message.answer(
            escape_md(f"‚ùå {info}"),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
        )
        return
    await message.answer(
        escape_md(f"‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {info}"),
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN_V2,
        disable_web_page_preview=True,
    )
    await refresh_admin_panel_by_state(bot, state, db)
    await state.clear()


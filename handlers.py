from __future__ import annotations

from datetime import datetime, timedelta

import aiosqlite
from aiogram import Router, F, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import config
from db import DB
from payments import process_payment

router = Router()

DEFAULT_TRIAL_DAYS = 3
DEFAULT_AUTO_RENEW = True
TRIAL_CODE_KIND = "trial"

CANCEL_REPLY = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True,
)


class BindChat(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —á–∞—Ç–∞ –ø–æ username."""

    wait_username = State()


class Admin(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""

    WaitPrices = State()
    WaitTrialDays = State()


class User(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    WaitPromoCode = State()


def is_super_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º."""

    return user_id in config.SUPER_ADMIN_IDS


def inline_emoji(flag: bool) -> str:
    """–í–µ—Ä–Ω—É—Ç—å —ç–º–æ–¥–∑–∏ –ø–æ –±—É–ª–µ–≤—É —Ñ–ª–∞–≥—É."""

    return "‚úÖ" if flag else "‚ùå"


def is_cancel(text: str | None) -> bool:
    """–ü–æ–Ω—è—Ç—å, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥."""

    if text is None:
        return False
    return text.strip().lower() == "–æ—Ç–º–µ–Ω–∞"


async def has_trial_coupon(db: DB, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∏–º–µ–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å trial-–ø—Ä–æ–º–æ–∫–æ–¥."""

    async with aiosqlite.connect(db.path) as conn:
        cur = await conn.execute(
            "SELECT 1 FROM coupons WHERE kind=? AND used_by=? LIMIT 1",
            (TRIAL_CODE_KIND, user_id),
        )
        return await cur.fetchone() is not None


async def build_user_keyboard(db: DB, user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""

    user = await db.get_user(user_id)
    auto_flag = bool(user and user["auto_renew"])
    builder = InlineKeyboardBuilder()
    for months in (1, 2, 3):
        builder.button(
            text=f"–ö—É–ø–∏—Ç—å {months} –º–µ—Å",
            callback_data=f"buy:months:{months}",
        )
    builder.button(
        text=f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {inline_emoji(auto_flag)}",
        callback_data="ar:toggle",
    )
    builder.button(text="–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="invite:once")
    builder.button(text="–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promo:enter")
    if is_super_admin(user_id):
        builder.button(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin:menu")
        builder.adjust(3, 3, 1)
    else:
        builder.adjust(3, 3)
    return builder.as_markup()


async def build_admin_keyboard(db: DB) -> InlineKeyboardMarkup:
    """–°–æ–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""

    auto_default = await db.get_auto_renew_default(DEFAULT_AUTO_RENEW)
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç", callback_data="admin:bind")
    builder.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin:show")
    builder.button(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã", callback_data="admin:prices")
    builder.button(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="admin:trialdays")
    builder.button(
        text=f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {inline_emoji(auto_default)}",
        callback_data="admin:ar_default",
    )
    builder.button(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å trial-–∫–æ–¥—ã", callback_data="admin:gen_trial")
    builder.adjust(2, 2, 1, 1)
    return builder.as_markup()


async def build_admin_summary(db: DB) -> str:
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""

    chat_username = await db.get_target_chat_username()
    chat_id = await db.get_target_chat_id()
    if chat_id is None:
        chat_line = "‚Ä¢ –ß–∞—Ç: –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    else:
        if chat_username:
            chat_line = f"‚Ä¢ –ß–∞—Ç: {chat_username} (id {chat_id})"
        else:
            chat_line = f"‚Ä¢ –ß–∞—Ç: id {chat_id}"
    trial_days = await db.get_trial_days_global(DEFAULT_TRIAL_DAYS)
    auto_default = await db.get_auto_renew_default(DEFAULT_AUTO_RENEW)
    prices = await db.get_prices({})
    if prices:
        price_lines = [
            f"  - {months} –º–µ—Å: {price}‚ÇΩ" for months, price in sorted(prices.items())
        ]
        price_block = "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç:\n" + "\n".join(price_lines)
    else:
        price_block = "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    lines = [
        "üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        chat_line,
        f"‚Ä¢ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {trial_days} –¥–Ω.",
        f"‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {inline_emoji(auto_default)}",
        price_block,
    ]
    return "\n".join(lines)


async def update_user_menu(message: Message, db: DB, user_id: int) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å inline-–º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    markup = await build_user_keyboard(db, user_id)
    try:
        await message.edit_reply_markup(reply_markup=markup)
    except TelegramBadRequest:
        await message.answer("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=markup)


async def apply_trial_to_user(db: DB, user_id: int, trial_days: int) -> tuple[str, bool]:
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å trial-–ø—Ä–æ–º–æ–∫–æ–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""

    user = await db.get_user(user_id)
    if user is None:
        return (
            "–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø.",
            False,
        )
    now_ts = int(datetime.utcnow().timestamp())
    expires_at = user["expires_at"] or 0
    trial_seconds = max(trial_days, 0) * 24 * 3600
    if trial_seconds == 0:
        return (
            "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            True,
        )
    if expires_at <= now_ts:
        new_exp = now_ts + trial_seconds
        async with aiosqlite.connect(db.path) as conn:
            await conn.execute(
                "UPDATE users SET expires_at=?, paid_only=0 WHERE user_id=?",
                (new_exp, user_id),
            )
            await conn.commit()
        readable = datetime.utcfromtimestamp(new_exp).strftime("%d.%m.%Y %H:%M UTC")
        return (f"–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ {readable}.", True)
    await db.set_paid_only(user_id, False)
    readable = datetime.utcfromtimestamp(expires_at).strftime("%d.%m.%Y %H:%M UTC")
    return (
        f"–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç. –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {readable}.",
        True,
    )


async def redeem_promo_code(
    message: Message,
    db: DB,
    code: str,
    *,
    remove_keyboard: bool,
) -> None:
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞."""

    normalized = (code or "").strip()
    if not normalized:
        text = "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
        if remove_keyboard:
            await message.answer(text, reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer(text)
        return
    ok, info, kind = await db.use_coupon(normalized, message.from_user.id)
    if not ok:
        if remove_keyboard:
            await message.answer(info, reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer(info)
        return
    if kind != TRIAL_CODE_KIND:
        text = "–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."
        if remove_keyboard:
            await message.answer(text, reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer(text)
        return
    trial_days = await db.get_trial_days_global(DEFAULT_TRIAL_DAYS)
    result_text, has_user = await apply_trial_to_user(db, message.from_user.id, trial_days)
    if not has_user:
        result_text = (
            f"{result_text}\n\n–ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start –±–æ—Ç –æ—Ñ–æ—Ä–º–∏—Ç –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø."
        )
    if remove_keyboard:
        await message.answer(result_text, reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer(result_text)
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=await build_user_keyboard(db, message.from_user.id),
    )


async def send_admin_panel(message: Message, db: DB) -> None:
    """–í—ã–≤–µ—Å—Ç–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ —á–∞—Ç."""

    summary = await build_admin_summary(db)
    markup = await build_admin_keyboard(db)
    await message.answer(summary, reply_markup=markup)


async def refresh_admin_panel(message: Message, db: DB) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""

    summary = await build_admin_summary(db)
    markup = await build_admin_keyboard(db)
    try:
        await message.edit_text(summary, reply_markup=markup)
    except TelegramBadRequest:
        await message.answer(summary, reply_markup=markup)


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, db: DB) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    await state.clear()
    user_id = message.from_user.id
    now_ts = int(datetime.utcnow().timestamp())
    auto_default = await db.get_auto_renew_default(DEFAULT_AUTO_RENEW)
    trial_days = await db.get_trial_days_global(DEFAULT_TRIAL_DAYS)
    paid_only = True
    if await has_trial_coupon(db, user_id):
        paid_only = False
    await db.upsert_user(user_id, now_ts, trial_days, auto_default, paid_only)
    if not paid_only:
        await db.set_paid_only(user_id, False)
    warning = "–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ú–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å: —Ç—É–º–±–ª–µ—Ä –Ω–∏–∂–µ."
    await message.answer(
        warning,
        reply_markup=await build_user_keyboard(db, user_id),
    )


@router.callback_query(F.data.startswith("buy:months:"))
async def handle_buy(callback: CallbackQuery, db: DB) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏."""

    user_id = callback.from_user.id
    parts = (callback.data or "").split(":")
    try:
        months = int(parts[2])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)
        return
    prices = await db.get_prices({})
    price = prices.get(months)
    if price is None:
        await callback.answer("–¶–µ–Ω–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
        return
    success, payment_text = await process_payment(user_id, months, prices)
    if not success:
        await callback.answer(payment_text, show_alert=True)
        return
    await db.extend_subscription(user_id, months)
    await db.set_paid_only(user_id, False)
    if callback.message:
        await callback.message.answer(payment_text)
        await update_user_menu(callback.message, db, user_id)
    await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞.")


@router.callback_query(F.data == "ar:toggle")
async def handle_toggle_autorenew(callback: CallbackQuery, db: DB) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    if user is None:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start.", show_alert=True)
        return
    current = bool(user["auto_renew"])
    new_flag = not current
    await db.set_auto_renew(user_id, new_flag)
    if callback.message:
        await update_user_menu(callback.message, db, user_id)
    status = "–≤–∫–ª—é—á–µ–Ω–æ" if new_flag else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
    await callback.answer(f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ {status}.")


@router.callback_query(F.data == "invite:once")
async def handle_invite(callback: CallbackQuery, bot: Bot, db: DB) -> None:
    """–í—ã–¥–∞—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç."""

    target_chat_id = await db.get_target_chat_id()
    if target_chat_id is None:
        await callback.answer("–ß–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.", show_alert=True)
        return
    expire_ts = int((datetime.utcnow() + timedelta(days=1)).timestamp())
    try:
        link = await bot.create_chat_invite_link(
            target_chat_id,
            member_limit=1,
            expire_date=expire_ts,
        )
    except Exception:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
        return
    if callback.message:
        await callback.message.answer(
            "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ (–¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞):\n" f"{link.invite_link}",
        )
    await callback.answer()


@router.callback_query(F.data == "promo:enter")
async def handle_promo_enter(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É –ø—Ä–æ–º–æ–∫–æ–¥–∞."""

    await state.set_state(User.WaitPromoCode)
    if callback.message:
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:",
            reply_markup=CANCEL_REPLY,
        )
    await callback.answer()


@router.message(User.WaitPromoCode)
async def handle_promo_input(message: Message, state: FSMContext, db: DB) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""

    text = message.text or ""
    if is_cancel(text):
        await state.clear()
        await message.answer(
            "–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω—ë–Ω.",
            reply_markup=ReplyKeyboardRemove(),
        )
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=await build_user_keyboard(db, message.from_user.id),
        )
        return
    await redeem_promo_code(message, db, text, remove_keyboard=True)
    await state.clear()


@router.message(Command("use"))
async def cmd_use(message: Message, state: FSMContext, db: DB) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /use –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞."""

    await state.clear()
    text = message.text or ""
    parts = text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /use ABC123.")
        return
    await redeem_promo_code(message, db, parts[1], remove_keyboard=False)


@router.callback_query(F.data == "admin:menu")
async def open_admin_menu(callback: CallbackQuery, db: DB) -> None:
    """–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ –∫–Ω–æ–ø–∫–µ."""

    if not is_super_admin(callback.from_user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    if callback.message:
        await send_admin_panel(callback.message, db)
    await callback.answer()


@router.callback_query(F.data == "admin:bind")
async def admin_bind(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –∞–¥–º–∏–Ω–∞ @username —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞."""

    if not is_super_admin(callback.from_user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.set_state(BindChat.wait_username)
    if callback.message:
        await callback.message.answer(
            "–ü—Ä–∏—à–ª–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.",
            reply_markup=CANCEL_REPLY,
        )
    await callback.answer()


@router.message(BindChat.wait_username)
async def process_bind_username(
    message: Message,
    bot: Bot,
    db: DB,
    state: FSMContext,
) -> None:
    """–ü—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç –ø–æ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–º—É username."""

    if not is_super_admin(message.from_user.id):
        await state.clear()
        return
    text = (message.text or "").strip()
    if is_cancel(text):
        await state.clear()
        await message.answer(
            "–ü—Ä–∏–≤—è–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return
    if not text.startswith("@") or len(text) < 2:
        await message.answer("–ù—É–∂–µ–Ω username –≤ —Ñ–æ—Ä–º–∞—Ç–µ @example.")
        return
    try:
        chat = await bot.get_chat(text)
    except TelegramBadRequest:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")
        return
    except Exception:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    stored_username = f"@{chat.username}" if getattr(chat, "username", None) else text
    await db.set_target_chat_username(stored_username)
    await db.set_target_chat_id(chat.id)
    await state.clear()
    await message.answer(
        f"–ß–∞—Ç {stored_username} (id {chat.id}) –ø—Ä–∏–≤—è–∑–∞–Ω.",
        reply_markup=ReplyKeyboardRemove(),
    )
    await send_admin_panel(message, db)


@router.callback_query(F.data == "admin:show")
async def admin_show(callback: CallbackQuery, db: DB) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""

    if not is_super_admin(callback.from_user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    text = await build_admin_summary(db)
    if callback.message:
        await callback.message.answer(text)
    await callback.answer()


@router.callback_query(F.data == "admin:prices")
async def admin_prices(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ü–µ–Ω."""

    if not is_super_admin(callback.from_user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.set_state(Admin.WaitPrices)
    if callback.message:
        await callback.message.answer(
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ü–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ '1:399,2:699'.",
            reply_markup=CANCEL_REPLY,
        )
    await callback.answer()


@router.message(Admin.WaitPrices)
async def admin_set_prices(message: Message, state: FSMContext, db: DB) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Ü–µ–Ω."""

    if not is_super_admin(message.from_user.id):
        await state.clear()
        return
    text = (message.text or "").strip()
    if is_cancel(text):
        await state.clear()
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return
    cleaned = text.replace(" ", "")
    entries = [item for item in cleaned.split(",") if item]
    prices: dict[int, int] = {}
    for entry in entries:
        if ":" not in entry:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–º–µ—Å—è—Ü—ã:—Ü–µ–Ω–∞'.")
            return
        left, right = entry.split(":", 1)
        try:
            months = int(left)
            price = int(right)
        except ValueError:
            await message.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ.")
            return
        if months <= 0 or price <= 0:
            await message.answer("–ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏.")
            return
        prices[months] = price
    if not prices:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏.")
        return
    await db.set_prices(prices)
    await state.clear()
    await message.answer("–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove())
    await send_admin_panel(message, db)


@router.callback_query(F.data == "admin:trialdays")
async def admin_trialdays(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–Ω—ã—Ö –¥–Ω–µ–π."""

    if not is_super_admin(callback.from_user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    await state.set_state(Admin.WaitTrialDays)
    if callback.message:
        await callback.message.answer(
            "–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).",
            reply_markup=CANCEL_REPLY,
        )
    await callback.answer()


@router.message(Admin.WaitTrialDays)
async def admin_set_trial_days(message: Message, state: FSMContext, db: DB) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""

    if not is_super_admin(message.from_user.id):
        await state.clear()
        return
    text = (message.text or "").strip()
    if is_cancel(text):
        await state.clear()
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return
    if not text.isdigit():
        await message.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    days = int(text)
    if days <= 0:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return
    await db.set_trial_days_global(days)
    await state.clear()
    await message.answer(
        f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {days} –¥–Ω.",
        reply_markup=ReplyKeyboardRemove(),
    )
    await send_admin_panel(message, db)


@router.callback_query(F.data == "admin:ar_default")
async def admin_toggle_auto_default(callback: CallbackQuery, db: DB) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""

    if not is_super_admin(callback.from_user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    current = await db.get_auto_renew_default(DEFAULT_AUTO_RENEW)
    new_flag = not current
    await db.set_auto_renew_default(new_flag)
    if callback.message:
        await refresh_admin_panel(callback.message, db)
    await callback.answer(f"–¢–µ–ø–µ—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {inline_emoji(new_flag)}")


@router.callback_query(F.data == "admin:gen_trial")
async def admin_generate_trial(callback: CallbackQuery, db: DB) -> None:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–±–æ—Ä trial-–∫–æ–¥–æ–≤."""

    if not is_super_admin(callback.from_user.id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    codes = await db.gen_coupons(TRIAL_CODE_KIND, 5)
    if callback.message:
        if codes:
            lines = ["–°–æ–∑–¥–∞–Ω—ã trial-–∫–æ–¥—ã:"] + codes
            await callback.message.answer("\n".join(lines))
        else:
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã.")
    await callback.answer()

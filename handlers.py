from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ForceReply,
)
from datetime import datetime, timedelta
import secrets
import re
from typing import Optional, Tuple
from config import config
from db import DB
from payments import process_payment

router = Router(name="core")
callback_router = Router(name="callbacks")

def is_super_admin(uid: int) -> bool:
    return uid in config.SUPER_ADMIN_IDS


class AdminStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —Ñ–æ—Ä–º."""

    waiting_chat_username = State()
    waiting_trial_days = State()
    confirming_trial_days = State()
    waiting_prices = State()
    confirming_prices = State()
    waiting_trial_promo = State()
    waiting_invite_params = State()


class UserStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º."""

    waiting_promo_code = State()


def build_admin_keyboard(auto_renew_default: bool) -> ReplyKeyboardMarkup:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º."""

    autorenew_marker = "‚úÖ" if auto_renew_default else "‚ùå"
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç"), KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã")],
            [KeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥")],
            [
                KeyboardButton(
                    text=f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ({autorenew_marker})"
                )
            ],
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")],
            [KeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã (trial)")],
        ],
        resize_keyboard=True,
    )


USER_REPLY_KEYBOARD = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –µ—â—ë —Ä–∞–∑")],
        [KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
        [KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ")],
        [KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")],
    ],
    resize_keyboard=True,
)


def build_user_inline_keyboard(auto_renew: bool) -> InlineKeyboardMarkup:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é —Å —É—á—ë—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è."""

    autorenew_text = "–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ ‚úÖ" if auto_renew else "–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ ‚ùå"
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –µ—â—ë —Ä–∞–∑", callback_data="user:get_link")],
            [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="user:status")],
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="user:buy")],
            [
                InlineKeyboardButton(
                    text=autorenew_text, callback_data="user:autorenew:toggle"
                )
            ],
        ]
    )


def generate_promo_code(length: int = 10) -> str:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""

    alphabet = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"
    return "".join(secrets.choice(alphabet) for _ in range(length))


async def apply_trial_promo(message: Message, code: str, db: DB) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""

    normalized = (code or "").strip()
    if not normalized:
        await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return False
    user_id = message.from_user.id
    now_ts = int(datetime.utcnow().timestamp())
    ok, error, details = await db.redeem_promo_code(normalized, user_id, now_ts)
    if not ok:
        await message.answer(error)
        return False
    if (details or {}).get("code_type") != "trial":
        await message.answer("–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –¥–∞—ë—Ç –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return False
    trial_days_raw = details.get("trial_days") if details else None
    try:
        trial_days = int(trial_days_raw)
    except (TypeError, ValueError):
        await message.answer(
            "–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å—Ä–æ–∫ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return False
    auto_renew_default = await db.get_auto_renew_default(config.AUTO_RENEW_DEFAULT)
    bypass = user_id in config.ADMIN_BYPASS_IDS
    await db.grant_trial_days(user_id, trial_days, now_ts, auto_renew_default, bypass)
    row = await db.get_user(user_id)
    if row and row["expires_at"]:
        dt = datetime.utcfromtimestamp(row["expires_at"])
        await message.answer(
            f"–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {dt} UTC."
        )
    else:
        await message.answer(
            "–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å."
        )
    return True


async def build_admin_summary(db: DB) -> str:
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""

    chat_username = await db.get_target_chat_username()
    chat_id = await db.get_target_chat_id()
    if chat_id is None:
        chat_info = "‚Ä¢ –ß–∞—Ç: –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    else:
        if not chat_username:
            chat_info = f"‚Ä¢ –ß–∞—Ç: id {chat_id}"
        else:
            chat_info = f"‚Ä¢ –ß–∞—Ç: {chat_username} (id {chat_id})"

    trial_days = await db.get_trial_days(config.TRIAL_DAYS)
    auto_renew_default = await db.get_auto_renew_default(config.AUTO_RENEW_DEFAULT)
    auto_renew_marker = "‚úÖ" if auto_renew_default else "‚ùå"
    auto_renew_text = "–≤–∫–ª—é—á–µ–Ω–æ" if auto_renew_default else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
    prices = await db.get_prices(config.PRICES)
    if prices:
        price_lines = [
            f"‚Ä¢ {months} –º–µ—Å: {price}‚ÇΩ" for months, price in sorted(prices.items())
        ]
        price_text = "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç:\n" + "\n".join(price_lines)
    else:
        price_text = "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –ø–æ–∫–∞ –ø—É—Å—Ç"

    lines = [
        "üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        "",
        chat_info,
        f"‚Ä¢ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {trial_days} –¥–Ω.",
        f"‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {auto_renew_text} {auto_renew_marker}",
        "",
        price_text,
        "",
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.",
    ]
    return "\n".join(lines)


async def send_admin_menu(m: Message, db: DB):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é —Å–æ —Å–≤–æ–¥–∫–æ–π."""

    summary = await build_admin_summary(db)
    auto_renew_default = await db.get_auto_renew_default(config.AUTO_RENEW_DEFAULT)
    kb = build_admin_keyboard(auto_renew_default)
    await m.answer(summary, reply_markup=kb)


def build_autorenew_keyboard(current_flag: bool) -> InlineKeyboardMarkup:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è."""

    on_text = "‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ" if current_flag else "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ"
    off_text = "–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ" if current_flag else "‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ"
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=on_text, callback_data="user:autorenew:on")],
            [InlineKeyboardButton(text=off_text, callback_data="user:autorenew:off")],
        ]
    )


def build_confirmation_keyboard(action: str) -> InlineKeyboardMarkup:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π."""

    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin:{action}:confirm"
                ),
                InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞", callback_data=f"admin:{action}:cancel"
                ),
            ]
        ]
    )


async def reply_to_target(target, text: str, **kwargs):
    """–û—Ç–≤–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∏–ø–∞ –∞–ø–¥–µ–π—Ç–∞."""

    if isinstance(target, CallbackQuery):
        await target.message.answer(text, **kwargs)
        await target.answer()
    else:
        await target.answer(text, **kwargs)


async def send_subscription_status(target, db: DB):
    """–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–¥–ø–∏—Å–∫–∏."""

    user_id = target.from_user.id
    row = await db.get_user(user_id)
    if not row:
        await reply_to_target(target, "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start.")
        return
    exp = row["expires_at"]
    dt = datetime.utcfromtimestamp(exp)
    ar = "–≤–∫–ª" if row["auto_renew"] else "–≤—ã–∫–ª"
    po = "–¥–∞" if row["paid_only"] else "–Ω–µ—Ç"
    await reply_to_target(
        target,
        f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {dt} UTC\n–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {ar}\n–ë–µ–∑ –ø—Ä–æ–±–Ω–∏–∫–∞: {po}",
    )


async def send_invite_link(target, bot: Bot, db: DB):
    """–°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ."""

    user_id = target.from_user.id
    row = await db.get_user(user_id)
    if not row:
        await reply_to_target(target, "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start.")
        return
    if row["expires_at"] < int(datetime.utcnow().timestamp()):
        await reply_to_target(target, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –û–ø–ª–∞—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.")
        return
    target_chat_id = await db.get_target_chat_id()
    if target_chat_id is None:
        await reply_to_target(target, "–ß–∞—Ç –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    try:
        expire_ts = int((datetime.utcnow() + timedelta(hours=24)).timestamp())
        link = await bot.create_chat_invite_link(
            target_chat_id, member_limit=1, expire_date=expire_ts
        )
        await reply_to_target(
            target,
            "–í–∞—à–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –≤ –∫–∞–Ω–∞–ª (–¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞):\n" + link.invite_link,
        )
    except Exception:
        await reply_to_target(target, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É.")


@router.message(CommandStart())
async def cmd_start(m: Message, db: DB):
    now_ts = int(datetime.utcnow().timestamp())
    trial_days = await db.get_trial_days(config.TRIAL_DAYS)
    auto_renew_default = await db.get_auto_renew_default(config.AUTO_RENEW_DEFAULT)
    paid_only = (m.from_user.id in config.PAID_ONLY_IDS)
    bypass = (m.from_user.id in config.ADMIN_BYPASS_IDS)
    await db.upsert_user(
        m.from_user.id, now_ts, trial_days, auto_renew_default, paid_only, bypass
    )
    row = await db.get_user(m.from_user.id)
    auto_renew_flag = bool(row["auto_renew"]) if row else auto_renew_default

    warning_lines = [
        "‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –ø–ª–∞—Ç–Ω–∞—è –∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.",
        "–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è, –æ—Ç–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –∑–∞—Ä–∞–Ω–µ–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø–æ–º.",
    ]
    await m.answer("\n".join(warning_lines), reply_markup=USER_REPLY_KEYBOARD)
    user_menu = build_user_inline_keyboard(auto_renew_flag)
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_menu)


@router.message(Command("use"))
async def cmd_use(m: Message, db: DB):
    args = (m.text or "").split(maxsplit=1)
    if len(args) < 2:
        await m.answer("–§–æ—Ä–º–∞—Ç: /use <–ø—Ä–æ–º–æ–∫–æ–¥>.")
        return
    await apply_trial_promo(m, args[1], db)

@router.message(F.text.in_({"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –µ—â—ë —Ä–∞–∑", "–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É"}))
async def user_get_link_button(m: Message, bot: Bot, db: DB):
    await send_invite_link(m, bot, db)


@router.message(F.text.in_({"–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å", "–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"}))
async def user_status_button(m: Message, db: DB):
    await send_subscription_status(m, db)


@router.message(F.text == "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def user_buy_button(m: Message, db: DB):
    prices = await db.get_prices(config.PRICES)
    if not prices:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–¥–ª–µ–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    kb = build_purchase_keyboard(prices)
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:", reply_markup=kb)


@router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ")
async def user_autorenew_menu_message(m: Message, db: DB):
    row = await db.get_user(m.from_user.id)
    if not row:
        await m.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start.")
        return
    kb = build_autorenew_keyboard(bool(row["auto_renew"]))
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è:", reply_markup=kb)


@router.message(F.text == "–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
async def user_enter_promo_button(m: Message, state: FSMContext):
    await state.set_state(UserStates.waiting_promo_code)
    await m.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'.",
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(UserStates.waiting_promo_code)
async def user_waiting_promo_code(m: Message, db: DB, state: FSMContext):
    text = (m.text or "").strip()
    if text.lower() in {"/cancel", "–æ—Ç–º–µ–Ω–∞"}:
        await state.clear()
        await m.answer(
            "–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=USER_REPLY_KEYBOARD
        )
        return
    if not text:
        await m.answer(
            "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'."
        )
        return
    success = await apply_trial_promo(m, text, db)
    if success:
        await state.clear()
        await m.answer(
            "–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
            reply_markup=USER_REPLY_KEYBOARD,
        )
    else:
        await m.answer(
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'."
        )


def build_purchase_keyboard(prices: dict[int, int]) -> InlineKeyboardMarkup:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–æ–∫—É–ø–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–µ—Å—è—Ü–µ–≤."""

    buttons = []
    for months, _ in sorted(prices.items()):
        text = f"–ö—É–ø–∏—Ç—å {months} –º–µ—Å"
        callback_data = f"user:buy:{months}"
        buttons.append([InlineKeyboardButton(text=text, callback_data=callback_data)])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ==== –ê–¥–º–∏–Ω—Å–∫–∏–µ ====

@router.message(Command("admin"))
async def cmd_admin_help(m: Message, db: DB):
    if not is_super_admin(m.from_user.id):
        return
    await send_admin_menu(m, db)


@router.message(F.text == "–ü—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç")
async def admin_bind_chat_button(m: Message, db: DB, state: FSMContext):
    if not is_super_admin(m.from_user.id):
        return
    await state.set_state(AdminStates.waiting_chat_username)
    await m.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å.",
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(AdminStates.waiting_chat_username)
async def admin_bind_chat_username(m: Message, bot: Bot, db: DB, state: FSMContext):
    if not is_super_admin(m.from_user.id):
        await state.clear()
        return
    text = (m.text or "").strip()
    if text.lower() in {"/cancel", "–æ—Ç–º–µ–Ω–∞"}:
        await state.clear()
        await m.answer("–ü—Ä–∏–≤—è–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await send_admin_menu(m, db)
        return
    if not text.startswith("@") or len(text) < 2:
        await m.answer("–ù—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å username –≤ —Ñ–æ—Ä–º–∞—Ç–µ @example. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'.")
        return
    username = text
    try:
        chat = await bot.get_chat(username)
    except Exception:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç –ø–æ —ç—Ç–æ–º—É username. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø, –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return
    stored_username = f"@{chat.username}" if chat.username else username
    await db.set_target_chat_username(stored_username)
    await db.set_target_chat_id(chat.id)
    await state.clear()
    await m.answer(f"–ß–∞—Ç {stored_username} (id {chat.id}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω.")
    await send_admin_menu(m, db)


@router.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def admin_show_settings_button(m: Message, db: DB):
    if not is_super_admin(m.from_user.id):
        return
    summary = await build_admin_summary(db)
    auto_renew_default = await db.get_auto_renew_default(config.AUTO_RENEW_DEFAULT)
    kb = build_admin_keyboard(auto_renew_default)
    await m.answer(summary, reply_markup=kb)


@router.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
async def admin_send_invite_button(m: Message, state: FSMContext):
    if not is_super_admin(m.from_user.id):
        return
    await state.set_state(AdminStates.waiting_invite_params)
    await m.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ user_id –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –≤ —á–∞—Å–∞—Ö "
        "–≤ —Ñ–æ—Ä–º–∞—Ç–µ '<user_id> [—á–∞—Å—ã]'. –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'.",
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(F.text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
async def admin_set_trial_button(m: Message, state: FSMContext, db: DB):
    if not is_super_admin(m.from_user.id):
        return
    await state.set_state(AdminStates.waiting_trial_days)
    current_days = await db.get_trial_days(config.TRIAL_DAYS)
    await m.answer(
        "\n".join(
            [
                f"–°–µ–π—á–∞—Å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {current_days} –¥–Ω.",
                "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ > 0).",
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'.",
            ]
        ),
        reply_markup=ForceReply(input_field_placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 7"),
    )


@router.message(AdminStates.waiting_trial_days)
async def admin_set_trial_days_state(m: Message, state: FSMContext, db: DB):
    if not is_super_admin(m.from_user.id):
        await state.clear()
        return
    text = (m.text or "").strip()
    if text.lower() in {"/cancel", "–æ—Ç–º–µ–Ω–∞"}:
        await state.clear()
        await m.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await send_admin_menu(m, db)
        return
    if not text.isdigit():
        await m.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'.")
        return
    days = int(text)
    if days <= 0:
        await m.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'.")
        return
    await state.update_data(pending_trial_days=days)
    await state.set_state(AdminStates.confirming_trial_days)
    kb = build_confirmation_keyboard("trial")
    await m.answer(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {days} –¥–Ω.",
        reply_markup=kb,
    )


def parse_prices_payload(text: str) -> Optional[dict[int, int]]:
    """–†–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤–≤–æ–¥ –ø—Ä–∞–π—Å–∞ —Ñ–æ—Ä–º–∞—Ç–∞ 1=990, 3=2700."""

    cleaned_text = text.replace("\n", " ")
    tokens = [token for token in re.split(r"[\s,;]+", cleaned_text) if token]
    if not tokens:
        return None
    prices: dict[int, int] = {}
    for token in tokens:
        if "=" not in token:
            return None
        left, right = token.split("=", 1)
        try:
            months = int(left)
            price = int(right)
        except ValueError:
            return None
        if months <= 0 or price <= 0:
            return None
        prices[months] = price
    return prices


@router.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã")
async def admin_edit_prices_button(m: Message, state: FSMContext, db: DB):
    if not is_super_admin(m.from_user.id):
        return
    await state.set_state(AdminStates.waiting_prices)
    current_prices = await db.get_prices(config.PRICES)
    if current_prices:
        current_lines = [
            f"{months}={price}" for months, price in sorted(current_prices.items())
        ]
        current_text = ", ".join(current_lines)
    else:
        current_text = "–Ω–µ –∑–∞–¥–∞–Ω"
    await m.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ –ø–∞—Ä—ã –≤–∏–¥–∞ '<–º–µ—Å—è—Ü–µ–≤>=<—Ü–µ–Ω–∞>' —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é. –ù–∞–ø—Ä–∏–º–µ—Ä: '1=990 3=2700'."
        " –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'."
        f"\n–¢–µ–∫—É—â–∏–π –ø—Ä–∞–π—Å: {current_text}",
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(AdminStates.waiting_prices)
async def admin_edit_prices_state(m: Message, state: FSMContext, db: DB):
    if not is_super_admin(m.from_user.id):
        await state.clear()
        return
    text = (m.text or "").strip()
    if text.lower() in {"/cancel", "–æ—Ç–º–µ–Ω–∞"}:
        await state.clear()
        await m.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–π—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await send_admin_menu(m, db)
        return
    prices = parse_prices_payload(text)
    if not prices:
        await m.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '1=990 3=2700'."
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'."
        )
        return
    price_items = [
        {"months": months, "price": price}
        for months, price in sorted(prices.items())
    ]
    await state.update_data(pending_prices=price_items)
    await state.set_state(AdminStates.confirming_prices)
    summary_lines = [
        f"‚Ä¢ {item['months']} –º–µ—Å ‚Äî {item['price']}‚ÇΩ" for item in price_items
    ]
    kb = build_confirmation_keyboard("prices")
    await m.answer(
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç:\n" + "\n".join(summary_lines),
        reply_markup=kb,
    )


@callback_router.callback_query(AdminStates.confirming_trial_days, F.data == "admin:trial:confirm")
async def admin_confirm_trial_days(callback: CallbackQuery, state: FSMContext, db: DB):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."""

    data = await state.get_data()
    days_raw = data.get("pending_trial_days")
    try:
        days = int(days_raw)
    except (TypeError, ValueError):
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", show_alert=True)
        await state.clear()
        await callback.message.edit_reply_markup()
        await callback.message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
        await send_admin_menu(callback.message, db)
        return
    await db.set_trial_days(days)
    await state.clear()
    await callback.message.edit_reply_markup()
    await callback.message.answer(f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω: {days} –¥–Ω.")
    await send_admin_menu(callback.message, db)
    await callback.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")


@callback_router.callback_query(AdminStates.confirming_trial_days, F.data == "admin:trial:cancel")
async def admin_cancel_trial_days(callback: CallbackQuery, state: FSMContext, db: DB):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."""

    await state.clear()
    await callback.message.edit_reply_markup()
    await callback.message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await send_admin_menu(callback.message, db)
    await callback.answer()


@callback_router.callback_query(AdminStates.confirming_prices, F.data == "admin:prices:confirm")
async def admin_confirm_prices(callback: CallbackQuery, state: FSMContext, db: DB):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç."""

    data = await state.get_data()
    price_items = data.get("pending_prices") or []
    prices: dict[int, int] = {}
    for item in price_items:
        try:
            months = int(item["months"])
            price = int(item["price"])
        except (KeyError, TypeError, ValueError):
            continue
        prices[months] = price
    if not prices:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∞–π—Å.", show_alert=True)
        await state.clear()
        await callback.message.edit_reply_markup()
        await send_admin_menu(callback.message, db)
        return
    await db.set_prices(prices)
    await state.clear()
    await callback.message.edit_reply_markup()
    await callback.message.answer("–ü—Ä–∞–π—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await send_admin_menu(callback.message, db)
    await callback.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")


@callback_router.callback_query(AdminStates.confirming_prices, F.data == "admin:prices:cancel")
async def admin_cancel_prices(callback: CallbackQuery, state: FSMContext, db: DB):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞."""

    await state.clear()
    await callback.message.edit_reply_markup()
    await callback.message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–π—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await send_admin_menu(callback.message, db)
    await callback.answer()


async def create_trial_codes_message(
    db: DB, count: int, trial_days: int, ttl_days: Optional[int]
) -> Tuple[bool, str]:
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞."""

    expires_at: Optional[int] = None
    if ttl_days is not None:
        expires_at = int((datetime.utcnow() + timedelta(days=ttl_days)).timestamp())

    codes: list[str] = []
    attempts = 0
    max_attempts = max(count * 5, 10)
    while len(codes) < count and attempts < max_attempts:
        attempts += 1
        code = generate_promo_code()
        try:
            await db.create_promo_code(
                code=code,
                code_type="trial",
                expires_at=expires_at,
                max_uses=1,
                per_user_limit=1,
                trial_days=trial_days,
            )
            codes.append(code)
        except ValueError:
            continue
    if not codes:
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
    lines = [f"–°–æ–∑–¥–∞–Ω–æ {len(codes)} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–∞ {trial_days} –¥–Ω."]
    if len(codes) < count:
        lines.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.")
    if expires_at:
        expire_dt = datetime.utcfromtimestamp(expires_at)
        lines.append(f"–ö–æ–¥—ã –¥–µ–π—Å—Ç–≤—É—é—Ç –¥–æ {expire_dt} UTC.")
    lines.append("–ö–æ–¥—ã:\n" + "\n".join(codes))
    return True, "\n\n".join(lines)


@router.message(F.text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã (trial)")
async def admin_generate_trial_button(m: Message, state: FSMContext):
    if not is_super_admin(m.from_user.id):
        return
    await state.set_state(AdminStates.waiting_trial_promo)
    await m.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ '<–∫–æ–ª-–≤–æ> <–¥–Ω–µ–π_–ø—Ä–æ–±–Ω–æ–≥–æ> [—Å—Ä–æ–∫_–∫–æ–¥–∞_–≤_–¥–Ω—è—Ö]'."
        " –ù–∞–ø—Ä–∏–º–µ—Ä: '5 7 30'. –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'.",
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(AdminStates.waiting_trial_promo)
async def admin_generate_trial_state(m: Message, state: FSMContext, db: DB):
    if not is_super_admin(m.from_user.id):
        await state.clear()
        return
    text = (m.text or "").strip()
    if text.lower() in {"/cancel", "–æ—Ç–º–µ–Ω–∞"}:
        await state.clear()
        await m.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await send_admin_menu(m, db)
        return
    parts = text.split()
    if len(parts) < 2 or len(parts) > 3 or not all(part.isdigit() for part in parts):
        await m.answer(
            "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–≤–∞ –∏–ª–∏ —Ç—Ä–∏ —á–∏—Å–ª–∞: '<–∫–æ–ª-–≤–æ> <–¥–Ω–µ–π_–ø—Ä–æ–±–Ω–æ–≥–æ> [—Å—Ä–æ–∫_–∫–æ–¥–∞_–≤_–¥–Ω—è—Ö]'."
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'."
        )
        return
    count = int(parts[0])
    trial_days = int(parts[1])
    ttl_days = int(parts[2]) if len(parts) == 3 else None
    if count <= 0 or trial_days <= 0 or (ttl_days is not None and ttl_days <= 0):
        await m.answer(
            "–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'."
        )
        return
    if count > 100:
        await m.answer("–ó–∞ –æ–¥–∏–Ω —Ä–∞–∑ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 100 –∫–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    ok, message = await create_trial_codes_message(db, count, trial_days, ttl_days)
    await state.clear()
    await m.answer(message)
    await send_admin_menu(m, db)


@router.message(AdminStates.waiting_invite_params)
async def admin_send_invite_state(m: Message, state: FSMContext, bot: Bot, db: DB):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""

    if not is_super_admin(m.from_user.id):
        await state.clear()
        return
    text = (m.text or "").strip()
    if text.lower() in {"/cancel", "–æ—Ç–º–µ–Ω–∞"}:
        await state.clear()
        await m.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await send_admin_menu(m, db)
        return
    parts = text.split()
    if not parts or not parts[0].isdigit() or (len(parts) > 1 and not parts[1].isdigit()):
        await m.answer(
            "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å user_id –∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ —á–∞—Å–∞—Ö (—Ü–µ–ª—ã–µ —á–∏—Å–ª–∞). "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'."
        )
        return
    uid = int(parts[0])
    hours = int(parts[1]) if len(parts) > 1 else 24
    if hours <= 0:
        await m.answer(
            "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —á–∞—Å–æ–≤. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'."
        )
        return
    target_chat_id = await db.get_target_chat_id()
    if target_chat_id is None:
        await state.clear()
        await m.answer("–ß–∞—Ç –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç\".")
        await send_admin_menu(m, db)
        return
    try:
        expire_ts = int((datetime.utcnow() + timedelta(hours=hours)).timestamp())
        link = await bot.create_chat_invite_link(
            target_chat_id, member_limit=1, expire_date=expire_ts
        )
        await bot.send_message(
            uid,
            f"–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–¥–µ–π—Å—Ç–≤—É–µ—Ç {hours}—á):\n{link.invite_link}",
        )
        await state.clear()
        await m.answer("–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        await send_admin_menu(m, db)
    except Exception:
        await m.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'."
        )


@router.message(F.text.regexp(r"^–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"))
async def admin_toggle_autorenew_default(m: Message, db: DB):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π."""

    if not is_super_admin(m.from_user.id):
        return
    current_flag = await db.get_auto_renew_default(config.AUTO_RENEW_DEFAULT)
    new_flag = not current_flag
    await db.set_auto_renew_default(new_flag)
    status_text = "–≤–∫–ª—é—á–µ–Ω–æ" if new_flag else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
    await m.answer(f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–ø–µ—Ä—å {status_text}.")
    await send_admin_menu(m, db)


@router.message(Command("set_trial_days"))
async def cmd_set_trial_days(m: Message, db: DB):
    if not is_super_admin(m.from_user.id):
        return
    args = (m.text or "").split()
    if len(args) != 2 or not args[1].isdigit():
        await m.answer("–§–æ—Ä–º–∞—Ç: /set_trial_days <–¥–Ω–µ–π>")
        return
    days = int(args[1])
    await db.set_trial_days(days)
    await m.answer(f"OK. –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {days} –¥–Ω.")

@router.message(Command("set_paid_only"))
async def cmd_set_paid_only(m: Message, db: DB):
    if not is_super_admin(m.from_user.id):
        return
    args = (m.text or "").split()
    if len(args) != 3 or not args[1].isdigit() or args[2] not in ("on","off"):
        await m.answer("–§–æ—Ä–º–∞—Ç: /set_paid_only <user_id> <on|off>")
        return
    uid = int(args[1]); flag = (args[2]=="on")
    await db.set_paid_only(uid, flag)
    await m.answer(f"OK. user_id={uid} paid_only={flag}")

@router.message(Command("set_autorenew"))
async def cmd_set_autorenew(m: Message, db: DB):
    if not is_super_admin(m.from_user.id):
        return
    args = (m.text or "").split()
    if len(args) != 3 or not args[1].isdigit() or args[2] not in ("on","off"):
        await m.answer("–§–æ—Ä–º–∞—Ç: /set_autorenew <user_id> <on|off>")
        return
    uid = int(args[1]); flag = (args[2]=="on")
    await db.set_auto_renew(uid, flag)
    await m.answer(f"OK. user_id={uid} auto_renew={flag}")

@router.message(Command("bypass"))
async def cmd_bypass(m: Message, db: DB):
    if not is_super_admin(m.from_user.id):
        return
    args = (m.text or "").split()
    if len(args) != 3 or not args[1].isdigit() or args[2] not in ("on","off"):
        await m.answer("–§–æ—Ä–º–∞—Ç: /bypass <user_id> <on|off>")
        return
    uid = int(args[1]); flag = (args[2]=="on")
    await db.set_bypass(uid, flag)
    await m.answer(f"OK. user_id={uid} bypass={flag}")

@router.message(Command("price_list"))
async def cmd_price_list(m: Message, db: DB):
    if not is_super_admin(m.from_user.id):
        return
    prices = await db.get_prices(config.PRICES)
    lines = [f"{months} –º–µ—Å: {price}‚ÇΩ" for months, price in sorted(prices.items())]
    await m.answer("–ü—Ä–∞–π—Å:\n" + "\n".join(lines))

@router.message(Command("generate_trial_codes"))
async def cmd_generate_trial_codes(m: Message, db: DB):
    if not is_super_admin(m.from_user.id):
        return
    args = (m.text or "").split()
    if len(args) < 3 or not args[1].isdigit() or not args[2].isdigit():
        await m.answer(
            "–§–æ—Ä–º–∞—Ç: /generate_trial_codes <–∫–æ–ª-–≤–æ> <–¥–Ω–µ–π_–ø—Ä–æ–±–Ω–æ–≥–æ> [—Å—Ä–æ–∫_–∫–æ–¥–∞_–≤_–¥–Ω—è—Ö]"
        )
        return
    count = int(args[1])
    trial_days = int(args[2])
    if count <= 0 or trial_days <= 0:
        await m.answer("–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏.")
        return
    if count > 100:
        await m.answer("–ó–∞ –æ–¥–∏–Ω —Ä–∞–∑ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 100 –∫–æ–¥–æ–≤.")
        return
    ttl_days: Optional[int] = None
    if len(args) > 3:
        if not args[3].isdigit():
            await m.answer("–¢—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –¥–Ω–µ–π –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞.")
            return
        ttl_days = int(args[3])
        if ttl_days <= 0:
            await m.answer("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
            return
    ok, message = await create_trial_codes_message(db, count, trial_days, ttl_days)
    await m.answer(message)


# ==== Callback-–∫–Ω–æ–ø–∫–∏ ====

@callback_router.callback_query(F.data == "user:get_link")
async def user_get_link_callback(callback: CallbackQuery, bot: Bot, db: DB):
    await send_invite_link(callback, bot, db)


@callback_router.callback_query(F.data == "user:status")
async def user_status_callback(callback: CallbackQuery, db: DB):
    await send_subscription_status(callback, db)


@callback_router.callback_query(F.data == "user:buy")
async def user_buy_callback(callback: CallbackQuery, db: DB):
    prices = await db.get_prices(config.PRICES)
    if not prices:
        await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–¥–ª–µ–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await callback.answer()
        return
    kb = build_purchase_keyboard(prices)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:", reply_markup=kb)
    await callback.answer()


@callback_router.callback_query(F.data.startswith("user:buy:"))
async def user_buy_months_callback(callback: CallbackQuery, db: DB):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Å—Ä–æ–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""

    try:
        months = int(callback.data.split(":")[-1])
    except (ValueError, AttributeError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
        return
    prices = await db.get_prices(config.PRICES)
    ok, msg = await process_payment(callback.from_user.id, months, prices)
    if not ok:
        await callback.message.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞: " + msg)
        await callback.answer()
        return
    await db.extend_subscription(callback.from_user.id, months)
    await callback.message.answer(msg + "\n–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞.")
    await callback.answer()


@callback_router.callback_query(F.data == "user:autorenew_menu")
async def user_autorenew_menu_callback(callback: CallbackQuery, db: DB):
    row = await db.get_user(callback.from_user.id)
    if not row:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start.", show_alert=True)
        return
    kb = build_autorenew_keyboard(bool(row["auto_renew"]))
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è:", reply_markup=kb)
    await callback.answer()


@callback_router.callback_query(F.data == "user:autorenew:toggle")
async def user_autorenew_toggle(callback: CallbackQuery, db: DB):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ñ–ª–∞–≥ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

    row = await db.get_user(callback.from_user.id)
    if not row:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start.", show_alert=True)
        return
    new_flag = not bool(row["auto_renew"])
    await db.set_auto_renew(callback.from_user.id, new_flag)
    await callback.message.edit_reply_markup(
        reply_markup=build_user_inline_keyboard(new_flag)
    )
    status_text = "–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ" if new_flag else "–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ"
    await callback.answer(status_text)


@callback_router.callback_query(F.data == "user:autorenew:on")
async def user_autorenew_on(callback: CallbackQuery, db: DB):
    await db.set_auto_renew(callback.from_user.id, True)
    kb = build_autorenew_keyboard(True)
    await callback.message.edit_text("–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ.", reply_markup=kb)
    await callback.answer("–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ.")


@callback_router.callback_query(F.data == "user:autorenew:off")
async def user_autorenew_off(callback: CallbackQuery, db: DB):
    await db.set_auto_renew(callback.from_user.id, False)
    kb = build_autorenew_keyboard(False)
    await callback.message.edit_text("–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ.", reply_markup=kb)
    await callback.answer("–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ.")


@callback_router.callback_query()
async def handle_basic_callback(callback: CallbackQuery):
    """–ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∫–Ω–æ–ø–æ–∫."""
    await callback.answer()


router.include_router(callback_router)
